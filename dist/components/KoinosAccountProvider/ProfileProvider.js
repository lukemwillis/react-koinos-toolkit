"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProfileProvider = exports.ProfileContext = void 0;
exports.normalizeIpfsUris = normalizeIpfsUris;
exports.useProfile = void 0;
var _react = _interopRequireWildcard(require("react"));
var _koilib = require("koilib");
var _AccountProvider = require("./AccountProvider");
var _profileAbi = _interopRequireDefault(require("../../abis/profile-abi.json"));
var _collectionsAbi = _interopRequireDefault(require("../../abis/collections-abi.json"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var ProfileContext = /*#__PURE__*/(0, _react.createContext)({});
exports.ProfileContext = ProfileContext;
var useProfile = function useProfile() {
  return (0, _react.useContext)(ProfileContext);
};
exports.useProfile = useProfile;
var ProfileProvider = function ProfileProvider(_ref) {
  var kapProfileAddress = _ref.kapProfileAddress,
    children = _ref.children;
  var _useAccount = (0, _AccountProvider.useAccount)(),
    provider = _useAccount.provider,
    signer = _useAccount.signer,
    address = _useAccount.address;
  var _useState = (0, _react.useState)(),
    _useState2 = _slicedToArray(_useState, 2),
    profile = _useState2[0],
    setProfile = _useState2[1];
  var _useState3 = (0, _react.useState)(),
    _useState4 = _slicedToArray(_useState3, 2),
    avatarSrc = _useState4[0],
    setAvatarSrc = _useState4[1];
  var _useMemo = (0, _react.useMemo)(function () {
      if (!kapProfileAddress) {
        return {
          fetchProfile: function () {
            var _fetchProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", undefined);
                  case 1:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));
            function fetchProfile() {
              return _fetchProfile.apply(this, arguments);
            }
            return fetchProfile;
          }()
        };
      }
      var profileContract = new _koilib.Contract({
        id: kapProfileAddress,
        abi: _profileAbi.default,
        provider: provider,
        signer: signer
      });
      var fetchProfile = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var _yield$functions$get_, profileResult, nftContract, _yield$functions$uri, nftResult, uri, metadata, _yield$metadata$json, image, imageSrc;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return profileContract.functions.get_profile({
                  address: address
                });
              case 2:
                _yield$functions$get_ = _context2.sent;
                profileResult = _yield$functions$get_.result;
                setProfile(profileResult || {});
                if (!(profileResult !== null && profileResult !== void 0 && profileResult.avatar_contract_id && profileResult.avatar_token_id)) {
                  _context2.next = 27;
                  break;
                }
                nftContract = new _koilib.Contract({
                  id: profileResult.avatar_contract_id,
                  abi: _collectionsAbi.default,
                  provider: provider,
                  signer: signer
                });
                _context2.next = 9;
                return nftContract.functions.uri({});
              case 9:
                _yield$functions$uri = _context2.sent;
                nftResult = _yield$functions$uri.result;
                if (!(nftResult !== null && nftResult !== void 0 && nftResult.value)) {
                  _context2.next = 27;
                  break;
                }
                _context2.prev = 12;
                uri = normalizeIpfsUris(nftResult.value);
                _context2.next = 16;
                return fetch("".concat(uri, "/").concat(profileResult.avatar_token_id));
              case 16:
                metadata = _context2.sent;
                _context2.next = 19;
                return metadata.json();
              case 19:
                _yield$metadata$json = _context2.sent;
                image = _yield$metadata$json.image;
                imageSrc = normalizeIpfsUris(image);
                setAvatarSrc(imageSrc);
                _context2.next = 27;
                break;
              case 25:
                _context2.prev = 25;
                _context2.t0 = _context2["catch"](12);
              case 27:
              case "end":
                return _context2.stop();
            }
          }, _callee2, null, [[12, 25]]);
        }));
        return function fetchProfile() {
          return _ref2.apply(this, arguments);
        };
      }();
      return {
        fetchProfile: fetchProfile
      };
    }, [kapProfileAddress, address, provider, signer]),
    fetchProfile = _useMemo.fetchProfile;
  (0, _react.useEffect)(function () {
    if (address) {
      setProfile({});
      setAvatarSrc("");
      fetchProfile();
    }
  }, [address]);
  return /*#__PURE__*/_react.default.createElement(ProfileContext.Provider, {
    value: {
      profile: profile,
      avatarSrc: avatarSrc
    }
  }, children);
};
exports.ProfileProvider = ProfileProvider;
function normalizeIpfsUris(uri) {
  var result = uri;
  if (uri.startsWith("ipfs://")) {
    var path = uri.indexOf("/", 7);
    if (path > -1) {
      result = "https://" + uri.substring(7, path) + ".ipfs.nftstorage.link" + uri.substring(path);
    } else {
      result = "https://" + uri.substring(7) + ".ipfs.nftstorage.link";
    }
  }
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfa29pbGliIiwiX0FjY291bnRQcm92aWRlciIsIl9wcm9maWxlQWJpIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jb2xsZWN0aW9uc0FiaSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwiX3R5cGVvZiIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImV4cG9ydHMiLCJPcCIsImhhc093biIsInZhbHVlIiwiJFN5bWJvbCIsIlN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJlcnIiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJzZWxmIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNyZWF0ZSIsImNvbnRleHQiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwiZm4iLCJhcmciLCJ0eXBlIiwiQ29udGludWVTZW50aW5lbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIm1ldGhvZCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVjb3JkIiwicmVzdWx0IiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJlcnJvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwic3RhdGUiLCJFcnJvciIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiZG9uZSIsIm1ldGhvZE5hbWUiLCJ1bmRlZmluZWQiLCJyZXR1cm4iLCJUeXBlRXJyb3IiLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNOYU4iLCJsZW5ndGgiLCJpIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwiaXRlciIsImtleXMiLCJ2YWwiLCJvYmplY3QiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwiY2F0Y2giLCJfY2F0Y2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIm8iLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsIm4iLCJ0b1N0cmluZyIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJsZW4iLCJhcnIyIiwiX2kiLCJfcyIsIl9lIiwiX3giLCJfciIsIl9hcnIiLCJfbiIsIl9kIiwiaXNBcnJheSIsIlByb2ZpbGVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInVzZVByb2ZpbGUiLCJ1c2VDb250ZXh0IiwiUHJvZmlsZVByb3ZpZGVyIiwiX3JlZiIsImthcFByb2ZpbGVBZGRyZXNzIiwiY2hpbGRyZW4iLCJfdXNlQWNjb3VudCIsInVzZUFjY291bnQiLCJwcm92aWRlciIsInNpZ25lciIsImFkZHJlc3MiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJwcm9maWxlIiwic2V0UHJvZmlsZSIsIl91c2VTdGF0ZTMiLCJfdXNlU3RhdGU0IiwiYXZhdGFyU3JjIiwic2V0QXZhdGFyU3JjIiwiX3VzZU1lbW8iLCJ1c2VNZW1vIiwiZmV0Y2hQcm9maWxlIiwiX2ZldGNoUHJvZmlsZSIsIl9jYWxsZWUiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJvZmlsZUNvbnRyYWN0IiwiQ29udHJhY3QiLCJpZCIsImFiaSIsInByb2ZpbGVBYmkiLCJfcmVmMiIsIl9jYWxsZWUyIiwiX3lpZWxkJGZ1bmN0aW9ucyRnZXRfIiwicHJvZmlsZVJlc3VsdCIsIm5mdENvbnRyYWN0IiwiX3lpZWxkJGZ1bmN0aW9ucyR1cmkiLCJuZnRSZXN1bHQiLCJ1cmkiLCJtZXRhZGF0YSIsIl95aWVsZCRtZXRhZGF0YSRqc29uIiwiaW1hZ2UiLCJpbWFnZVNyYyIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsImZ1bmN0aW9ucyIsImdldF9wcm9maWxlIiwiYXZhdGFyX2NvbnRyYWN0X2lkIiwiYXZhdGFyX3Rva2VuX2lkIiwibmZ0QWJpIiwibm9ybWFsaXplSXBmc1VyaXMiLCJmZXRjaCIsImNvbmNhdCIsImpzb24iLCJ0MCIsInVzZUVmZmVjdCIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsInN0YXJ0c1dpdGgiLCJwYXRoIiwiaW5kZXhPZiIsInN1YnN0cmluZyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0tvaW5vc0FjY291bnRQcm92aWRlci9Qcm9maWxlUHJvdmlkZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge1xuICB1c2VDb250ZXh0LFxuICBjcmVhdGVDb250ZXh0LFxuICB1c2VNZW1vLFxuICB1c2VTdGF0ZSxcbiAgdXNlRWZmZWN0LFxufSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IENvbnRyYWN0IH0gZnJvbSBcImtvaWxpYlwiO1xuaW1wb3J0IHsgdXNlQWNjb3VudCB9IGZyb20gXCIuL0FjY291bnRQcm92aWRlclwiO1xuaW1wb3J0IHByb2ZpbGVBYmkgZnJvbSBcIi4uLy4uL2FiaXMvcHJvZmlsZS1hYmkuanNvblwiO1xuaW1wb3J0IG5mdEFiaSBmcm9tIFwiLi4vLi4vYWJpcy9jb2xsZWN0aW9ucy1hYmkuanNvblwiO1xuXG5leHBvcnQgdHlwZSBMaW5rT2JqZWN0ID0ge1xuICBrZXk6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFByb2ZpbGVPYmplY3QgPSB7XG4gIGF2YXRhcl9jb250cmFjdF9pZD86IHN0cmluZztcbiAgYXZhdGFyX3Rva2VuX2lkPzogc3RyaW5nO1xuICBuYW1lPzogc3RyaW5nO1xuICBiaW8/OiBzdHJpbmc7XG4gIHRoZW1lPzogc3RyaW5nO1xuICBsaW5rcz86IExpbmtPYmplY3RbXTtcbn07XG5cbnR5cGUgUHJvZmlsZUNvbnRleHRUeXBlID0ge1xuICBwcm9maWxlPzogUHJvZmlsZU9iamVjdDtcbiAgYXZhdGFyU3JjPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNvbnN0IFByb2ZpbGVDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxQcm9maWxlQ29udGV4dFR5cGU+KHt9KTtcblxuZXhwb3J0IGNvbnN0IHVzZVByb2ZpbGUgPSAoKSA9PiB1c2VDb250ZXh0KFByb2ZpbGVDb250ZXh0KTtcblxuZXhwb3J0IGNvbnN0IFByb2ZpbGVQcm92aWRlciA9ICh7XG4gIGthcFByb2ZpbGVBZGRyZXNzLFxuICBjaGlsZHJlbixcbn06IHtcbiAga2FwUHJvZmlsZUFkZHJlc3M6IHN0cmluZztcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbn0pOiBKU1guRWxlbWVudCA9PiB7XG4gIGNvbnN0IHsgcHJvdmlkZXIsIHNpZ25lciwgYWRkcmVzcyB9ID0gdXNlQWNjb3VudCgpO1xuICBjb25zdCBbcHJvZmlsZSwgc2V0UHJvZmlsZV0gPSB1c2VTdGF0ZTxQcm9maWxlT2JqZWN0PigpO1xuICBjb25zdCBbYXZhdGFyU3JjLCBzZXRBdmF0YXJTcmNdID0gdXNlU3RhdGU8c3RyaW5nPigpO1xuXG4gIGNvbnN0IHsgZmV0Y2hQcm9maWxlIH0gPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoIWthcFByb2ZpbGVBZGRyZXNzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmZXRjaFByb2ZpbGU6IGFzeW5jICgpID0+IHVuZGVmaW5lZCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgcHJvZmlsZUNvbnRyYWN0ID0gbmV3IENvbnRyYWN0KHtcbiAgICAgIGlkOiBrYXBQcm9maWxlQWRkcmVzcyxcbiAgICAgIGFiaTogcHJvZmlsZUFiaSxcbiAgICAgIHByb3ZpZGVyLFxuICAgICAgc2lnbmVyLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZmV0Y2hQcm9maWxlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQ6IHByb2ZpbGVSZXN1bHQgfSA9XG4gICAgICAgIGF3YWl0IHByb2ZpbGVDb250cmFjdCEuZnVuY3Rpb25zLmdldF9wcm9maWxlPFByb2ZpbGVPYmplY3Q+KHtcbiAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICB9KTtcbiAgICAgIHNldFByb2ZpbGUocHJvZmlsZVJlc3VsdCB8fCB7fSk7XG5cbiAgICAgIGlmIChwcm9maWxlUmVzdWx0Py5hdmF0YXJfY29udHJhY3RfaWQgJiYgcHJvZmlsZVJlc3VsdC5hdmF0YXJfdG9rZW5faWQpIHtcbiAgICAgICAgY29uc3QgbmZ0Q29udHJhY3QgPSBuZXcgQ29udHJhY3Qoe1xuICAgICAgICAgIGlkOiBwcm9maWxlUmVzdWx0LmF2YXRhcl9jb250cmFjdF9pZCxcbiAgICAgICAgICBhYmk6IG5mdEFiaSxcbiAgICAgICAgICBwcm92aWRlcixcbiAgICAgICAgICBzaWduZXIsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHsgcmVzdWx0OiBuZnRSZXN1bHQgfSA9IGF3YWl0IG5mdENvbnRyYWN0IS5mdW5jdGlvbnMudXJpKHt9KTtcblxuICAgICAgICBpZiAobmZ0UmVzdWx0Py52YWx1ZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB1cmkgPSBub3JtYWxpemVJcGZzVXJpcyhuZnRSZXN1bHQudmFsdWUgYXMgc3RyaW5nKTtcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gYXdhaXQgZmV0Y2goXG4gICAgICAgICAgICAgIGAke3VyaX0vJHtwcm9maWxlUmVzdWx0LmF2YXRhcl90b2tlbl9pZH1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgeyBpbWFnZSB9ID0gYXdhaXQgbWV0YWRhdGEuanNvbigpO1xuICAgICAgICAgICAgY29uc3QgaW1hZ2VTcmMgPSBub3JtYWxpemVJcGZzVXJpcyhpbWFnZSk7XG4gICAgICAgICAgICBzZXRBdmF0YXJTcmMoaW1hZ2VTcmMpO1xuICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgLy8gVE9ETyBkb24ndCBqdXN0IHN3YWxsb3cgZXJyb3JcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZldGNoUHJvZmlsZSxcbiAgICB9O1xuICB9LCBba2FwUHJvZmlsZUFkZHJlc3MsIGFkZHJlc3MsIHByb3ZpZGVyLCBzaWduZXJdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhZGRyZXNzKSB7XG4gICAgICBzZXRQcm9maWxlKHt9KTtcbiAgICAgIHNldEF2YXRhclNyYyhcIlwiKTtcbiAgICAgIGZldGNoUHJvZmlsZSgpO1xuICAgIH1cbiAgfSwgW2FkZHJlc3NdKTtcblxuICByZXR1cm4gKFxuICAgIDxQcm9maWxlQ29udGV4dC5Qcm92aWRlclxuICAgICAgdmFsdWU9e3tcbiAgICAgICAgcHJvZmlsZSxcbiAgICAgICAgYXZhdGFyU3JjLFxuICAgICAgfX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9Qcm9maWxlQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVJcGZzVXJpcyh1cmk6IHN0cmluZykge1xuICBsZXQgcmVzdWx0ID0gdXJpO1xuICBpZiAodXJpLnN0YXJ0c1dpdGgoXCJpcGZzOi8vXCIpKSB7XG4gICAgY29uc3QgcGF0aCA9IHVyaS5pbmRleE9mKFwiL1wiLCA3KTtcbiAgICBpZiAocGF0aCA+IC0xKSB7XG4gICAgICByZXN1bHQgPVxuICAgICAgICBcImh0dHBzOi8vXCIgK1xuICAgICAgICB1cmkuc3Vic3RyaW5nKDcsIHBhdGgpICtcbiAgICAgICAgXCIuaXBmcy5uZnRzdG9yYWdlLmxpbmtcIiArXG4gICAgICAgIHVyaS5zdWJzdHJpbmcocGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IFwiaHR0cHM6Ly9cIiArIHVyaS5zdWJzdHJpbmcoNykgKyBcIi5pcGZzLm5mdHN0b3JhZ2UubGlua1wiO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFPQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxnQkFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsV0FBQSxHQUFBQyxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQUssZUFBQSxHQUFBRCxzQkFBQSxDQUFBSixPQUFBO0FBQXFELFNBQUFJLHVCQUFBRSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFYLHdCQUFBTyxHQUFBLEVBQUFJLFdBQUEsU0FBQUEsV0FBQSxJQUFBSixHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsYUFBQVEsT0FBQSxDQUFBUixHQUFBLHlCQUFBQSxHQUFBLDRCQUFBRSxPQUFBLEVBQUFGLEdBQUEsVUFBQVMsS0FBQSxHQUFBTix3QkFBQSxDQUFBQyxXQUFBLE9BQUFLLEtBQUEsSUFB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