"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SearchBox;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@chakra-ui/react");
var _icons = require("@chakra-ui/icons");
var _CTA = _interopRequireDefault(require("./CTA"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function SearchBox(_ref) {
  var placeholder = _ref.placeholder,
    _ref$buttonLabel = _ref.buttonLabel,
    buttonLabel = _ref$buttonLabel === void 0 ? "Search" : _ref$buttonLabel,
    _ref$inlineButton = _ref.inlineButton,
    inlineButton = _ref$inlineButton === void 0 ? false : _ref$inlineButton,
    _ref$onSearch = _ref.onSearch,
    onSearch = _ref$onSearch === void 0 ? function () {} : _ref$onSearch,
    inputRef = _ref.inputRef,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? "" : _ref$value,
    setValue = _ref.setValue,
    _ref$autoFocus = _ref.autoFocus,
    autoFocus = _ref$autoFocus === void 0 ? true : _ref$autoFocus,
    secondaryCTA = _ref.secondaryCTA;
  var _useState = (0, _react.useState)(value),
    _useState2 = _slicedToArray(_useState, 2),
    query = _useState2[0],
    internalSetQuery = _useState2[1];
  var altRef = (0, _react.useRef)(null);
  var setQuery = function setQuery(val) {
    if (setValue) {
      setValue(val);
    } else {
      internalSetQuery(val);
    }
  };
  (0, _react.useEffect)(function () {
    if (!autoFocus) return;
    if (inputRef && inputRef.current) {
      inputRef.current.focus();
    } else if (altRef.current) {
      altRef.current.focus();
    }
  }, [autoFocus, inputRef, altRef]);
  (0, _react.useEffect)(function () {
    internalSetQuery(value);
  }, [value]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_react2.InputGroup, {
    maxWidth: "30em"
  }, /*#__PURE__*/_react.default.createElement(_react2.Input, {
    placeholder: placeholder,
    fontSize: "xl",
    size: "lg",
    value: query,
    onChange: function onChange(e) {
      return setQuery(e.target.value);
    },
    onKeyUp: function onKeyUp(e) {
      if (e.key === "Enter" && query.length > 0) {
        window.open("https://kap.domains/search?q=".concat(query));
        onSearch();
      }
    },
    ref: inputRef || altRef,
    _focusVisible: {
      borderColor: (0, _react2.useColorModeValue)("brand.navy", "white")
    },
    paddingRight: inlineButton && query ? "7em" : "16",
    onFocus: function onFocus(e) {
      return e.target.select();
    }
  }), !inlineButton && /*#__PURE__*/_react.default.createElement(_react2.InputLeftElement, {
    pointerEvents: "none",
    fontSize: "lg",
    margin: "1",
    color: "gray.500"
  }, /*#__PURE__*/_react.default.createElement(_icons.SearchIcon, null)), /*#__PURE__*/_react.default.createElement(_react2.InputRightElement, {
    pointerEvents: inlineButton && query ? "auto" : "none",
    fontSize: "lg",
    margin: "1",
    color: "gray.500",
    width: "auto"
  }, /*#__PURE__*/_react.default.createElement(_react2.Flex, {
    gap: "2",
    alignItems: "center",
    paddingRight: "2"
  }, /*#__PURE__*/_react.default.createElement(_react2.Text, null, ".koin"), inlineButton && query && /*#__PURE__*/_react.default.createElement("a", {
    href: query.length > 0 ? "https://kap.domains/search?q=".concat(query) : "#"
  }, /*#__PURE__*/_react.default.createElement(_CTA.default, {
    size: "sm",
    onClick: onSearch,
    label: buttonLabel,
    secondary: secondaryCTA
  }))))), !inlineButton && /*#__PURE__*/_react.default.createElement("a", {
    href: query.length > 0 ? "https://kap.domains/search?q=".concat(query) : "#"
  }, /*#__PURE__*/_react.default.createElement(_CTA.default, {
    size: "lg",
    onClick: onSearch,
    label: buttonLabel,
    secondary: secondaryCTA
  })));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,